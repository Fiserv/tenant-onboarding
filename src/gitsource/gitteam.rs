use serde_derive::{Deserialize, Serialize};
use reqwest;
use std::error::Error;
use std::time::Duration;
use yaml_rust::{Yaml, YamlLoader, YamlEmitter};
use serde_json::Value;
use reqwest::{Client, Method};

#[derive(Serialize, Deserialize, Debug)] 
struct TeamInfo { 
    name: String,
    description: String,
    permission:String,
    privacy:String,
    repo_names:[String ;1]
}


// #[tokio::main]
// pub async fn get_github_team() -> Result<(), Box<dyn Error>> {

//  let github_client = reqwest::Client::new();
//     let github_data = github_client
//                         .get(github_api)
//                         .bearer_auth(GITHUB_TOKENT)
//                         .header("User-Agent", "tenant-onbaording")
//                         .timeout(Duration::from_secs(3))
//                         .send()
//                         .await?
//                         .text()
//                         .await?;  
//                         println!("Status {}", github_data);  
//     Ok(())
// }


#[tokio::main]
pub async fn create_github_team(config_yaml: &Vec<Yaml> , settings_yaml: &Vec<Yaml> ) -> Result<(bool), Box<dyn Error>> {

    let mut created = false;

    let config = &config_yaml[0]; 
    let tenant_team = config["github"]["teamName"].as_str().unwrap();
    let tenant_repo = config["github"]["repoName"].as_str().unwrap();

    let setting = &settings_yaml[0];
    let github_api = setting["github"]["gitHubAPIUrl"].as_str().unwrap();
    let github_token = setting["github"]["gitHubAuthToken"].as_str().unwrap();
  
    println!("Adding new Tenant Team {:#?}", tenant_team);

    let teams_data = TeamInfo { 
        name: tenant_team.to_string(),
        description: "A new team group generated by rust team".to_string() ,
        permission:"push".to_string(),  
        privacy:"closed".to_string(),
        repo_names: [format!("{}{}", "Fiserv/", tenant_repo).to_string()]  
        };
   
    let github_client = reqwest::Client::new();
    let post_req = github_client.request(Method::POST, github_api)
    .bearer_auth(github_token)
    .header("User-Agent", "tenant-onbaording")
    .header("Accept", "application/vnd.github+json")
    .timeout(Duration::from_secs(5))
    .json(&teams_data);

    let resp_data = post_req.send().await?; 

    //if (resp_data.status() == reqwest::StatusCode::CREATED) 
    if (resp_data.status() == reqwest::StatusCode::UNPROCESSABLE_ENTITY) 
    {
        println!("Status {}", resp_data.status());
        let res_body = resp_data.bytes().await?; 
        let str_body = res_body.to_vec();
        let str_response = String::from_utf8_lossy(&str_body);
        println!("response: {} ", str_response);
        created = true;
    }
    Ok((created))
}