use serde_derive::{Deserialize, Serialize};
use reqwest;
use std::error::Error;
use std::time::Duration;
use yaml_rust::{Yaml, YamlLoader, YamlEmitter};
use serde_json::Value;
use reqwest::{Client, Method};

const GITHUB_API:&str ="https://api.github.com/orgs/Fiserv/teams";
const GITHUB_TOKENT:&str = "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";
const GITHUB_REPO_GEN_API:&str = "https://api.github.com/repos/Fiserv/sample-tenant-repo/generate";

#[derive(Serialize, Deserialize, Debug)] 
struct TeamInfo { 
    name: String,
    description: String,
    permission:String,
    privacy:String,
    repo_names:[String ;1]
}


#[tokio::main]
pub async fn get_github_team() -> Result<(), Box<dyn Error>> {

 let github_client = reqwest::Client::new();
    let github_data = github_client
        .get(GITHUB_API)
        .bearer_auth(GITHUB_TOKENT)
        .header("User-Agent", "tenant-onbaording")
        .timeout(Duration::from_secs(3))
        .send()
        .await?
        .text()
        .await?;  
        println!("Status {}", github_data);  
    Ok(())
}


#[tokio::main]
pub async fn create_github_team(yaml: &Vec<Yaml>) -> Result<(), Box<dyn Error>> {

    let y = &yaml[0]; 
    let tenant_team = y["github"]["teamName"].as_str().unwrap();
    let tenant_repo = y["github"]["repoName"].as_str().unwrap();
    println!("tenant_repo {:#?}", tenant_team);

    let teams_data = TeamInfo { 
        name: tenant_team.to_string(),
        description: "A new team group generated by rust team".to_string() ,
        permission:"push".to_string(),  
        privacy:"closed".to_string(),
        repo_names: [format!("{}{}", "Fiserv/", tenant_repo).to_string()]  
        };
   
    let github_client = reqwest::Client::new();
    let post_req = github_client.request(Method::POST, GITHUB_API)
    .bearer_auth(GITHUB_TOKENT)
    .header("User-Agent", "tenant-onbaording")
    .header("Accept", "application/vnd.github+json")
    .timeout(Duration::from_secs(5))
    .json(&teams_data);

    let resp_data = post_req.send().await?; 

    println!("Status {}", resp_data.status());
    //if (resp_data.status() == reqwest::StatusCode::CREATED) 
    let res_body = resp_data.bytes().await?;

    let v = res_body.to_vec();
    let s = String::from_utf8_lossy(&v);
    println!("response: {} ", s);
 
    Ok(())
}