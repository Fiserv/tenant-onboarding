use serde_derive::{Deserialize, Serialize};
use reqwest;
use std::error::Error;
use std::time::Duration;
use yaml_rust::{Yaml, YamlLoader, YamlEmitter};
use serde_json::Value;
use reqwest::{Client, Method};


const GITHUB_API:&str ="https://api.github.com/orgs/Fiserv/teams";
const GITHUB_TOKENT:&str = "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";
const GITHUB_REPO_GEN_API:&str = "https://api.github.com/repos/Fiserv/sample-tenant-repo/generate";
 
 
#[derive(Serialize, Deserialize, Debug)] 
struct RepoInfo { 
    owner:String,
    name: String,
    description: String,
    private: bool,
    include_all_branches:bool 
}

#[tokio::main]
pub async fn create_repo(yaml: &Vec<Yaml>) -> Result<(), Box<dyn Error>> {

    let y = &yaml[0]; 
    let tenant_repo = y["github"]["repoName"].as_str().unwrap();
    println!("tenant_repo {:#?}", tenant_repo);
 
 let repo_data = RepoInfo { 
        owner: "Fiserv".to_string(),
        name: tenant_repo.to_string(),
        description: "A new tenant repo is generated by DevStudio team".to_string() ,
        private:false,
        include_all_branches:true 
        };
  
    let github_client = reqwest::Client::new();
    let post_req = github_client.request(Method::POST, GITHUB_REPO_GEN_API)
    .bearer_auth(GITHUB_TOKENT)
    .header("User-Agent", "tenant-onbaording")
    .header("Accept", "application/vnd.github+json")
    .timeout(Duration::from_secs(5))
    .json(&repo_data);

    let resp_data = post_req.send().await?; 

    println!("Status {}", resp_data.status());
    //if (resp_data.status() == reqwest::StatusCode::CREATED) 
    let res_body = resp_data.bytes().await?;

    let v = res_body.to_vec();
    let s = String::from_utf8_lossy(&v);
    println!("response: {} ", s);
 
    Ok(())
}

